# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tyiarD8NntQJj_bOmJd2PCjOOZNxEb6-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

file_path=r"/content/spend_analysis_dataset.csv"

df=pd.read_csv(file_path)
df.head()



df.info()

df.isnull().sum()

df.duplicated().sum()

df.columns

"""1. Distribution of Total Cost"""

plt.figure(figsize=(10,6))
sns.histplot(df['TotalCost'], kde=True , color='red')
plt.title('Distribution of Total Cost')
plt.xlabel('Total Cost')
plt.ylabel('Frequency')
plt.show()



# 2. Total Cost by Item Category
plt.figure(figsize=(12, 6))
category_total = df.groupby('Category')['TotalCost'].sum().sort_values(ascending=False)
sns.barplot(x=category_total.index, y=category_total.values, palette="viridis")
plt.title('Total Cost by Item Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Total Cost (INR)', fontsize=12)
plt.xticks(rotation=0)
plt.show()

#3 Average Purchase aMount by supplier

plt.figure(figsize=(12, 6))
supplier_avg = df.groupby('Supplier')['TotalCost'].mean().sort_values(ascending=False)
sns.barplot(x=supplier_avg.index, y=supplier_avg.values, palette="viridis")
plt.title('Average Purchase Amount by Supplier', fontsize=16)
plt.xlabel('Supplier', fontsize=12)
plt.ylabel('Average Purchase Amount (INR)', fontsize=12)
plt.xticks(rotation=0)

#4 number of pruchases by item Cateogory
plt.figure(figsize=(12,6))
category_count=df.groupby('Category')['TransactionID'].count().sort_values(ascending=False)
sns.barplot(x=category_count.index, y=category_count.values, palette="magma")
plt.title('Number of Purchases by Item Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Number of Purchases', fontsize=12)
plt.xticks(rotation=0)
plt.show()

#5 Total cost over time
df['PurchaseDate']=pd.to_datetime(df['PurchaseDate'])
df['Month']=df['PurchaseDate'].dt.to_period('M')
monthly_cost=df.groupby('Month')['TotalCost'].sum()
plt.figure(figsize=(12,6))
monthly_cost.plot(kind='line', color='blue' , marker='o')
plt.title('Total Cost Over Time', fontsize=16)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Total Cost (INR)', fontsize=12)
plt.xticks(rotation=45)
plt.show()

#6 Total Quantity purchased by item

plt.figure(figsize=(12,6))
item_quantity=df.groupby('ItemName')['Quantity'].sum().sort_values(ascending=False).head(10)
sns.barplot(x=item_quantity.index, y=item_quantity.values,palette="viridis")
plt.title('Top 10 items by quanitity purchased', fontsize=16)
plt.xlabel('item',fontsize=12)
plt.ylabel('Quantity purchased', fontsize=12)
plt.show()

# 7. Correlation Heatmap of Numeric Features
plt.figure(figsize=(10, 6))
correlation = df[['Quantity', 'UnitPrice', 'TotalCost']].corr()
sns.heatmap(correlation, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap', fontsize=16)
plt.show()

plt.figure(figsize=(12, 6))
buyer_total = df.groupby('Buyer')['TotalCost'].sum().sort_values(ascending=False).head(10)
sns.barplot(x=buyer_total.index, y=buyer_total.values, palette="YlGnBu")
plt.title('Top 10 Buyers by Total Purchase Amount', fontsize=16)
plt.xlabel('Buyer', fontsize=12)
plt.ylabel('Total Cost (INR)', fontsize=12)
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['Quantity'],y=df['TotalCost'],color='orange')
plt.title('Scatter plot Quantity vs Total COst',fontsize=16)
plt.xlabel('Quantity',fontsize=12)
plt.ylabel('Total Cost',fontsize=12)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

df['HighCost']=np.where(df['TotalCost']>5000,'High','Low')

label_encoder=LabelEncoder()

df['Supplier']=label_encoder.fit_transform(df['Supplier'])
df['Category']=label_encoder.fit_transform(df['Category'])
df['ItemName']=label_encoder.fit_transform(df['ItemName'])
df['Buyer']=label_encoder.fit_transform(df['Buyer'])
df['HighCost']=label_encoder.fit_transform(df['HighCost'])

print(df['Supplier'].head())

X=df[['Supplier','Category','ItemName','Quantity','UnitPrice','Buyer']]
y=df['HighCost']

X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42)

models={
    'LogisticRegression':LogisticRegression(max_iter=1000),
    'RandomForestClassifier':RandomForestClassifier(random_state=42),
    'SVC':SVC(),
    'DecisionTreeClassifier':DecisionTreeClassifier(random_state=42),
    'KNeighborsClassifier':KNeighborsClassifier(),
    'GaussianNB':GaussianNB()
}

results={}
for model_name, model in models.items():
  model.fit(X_train,y_train)
  #fitting the model
  y_pred=model.predict(X_test)

  #confusion matrix
  cm=confusion_matrix(y_test,y_pred)
  #classification report (Precision, Recall, F1 score)
  cr=classification_report(y_test,y_pred)
  #store results
  results[model_name]={'confusion_matrix':cm,'classification_report':cr}

  plt.figure(figsize=(6, 6))
  sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Low', 'High'], yticklabels=['Low', 'High'])
  plt.title(f'Confusion Matrix for {model_name}')
  plt.xlabel('Predicted')
  plt.ylabel('Actual')
  plt.show()

    # Display classification report
  print(f"Classification Report for {model_name}:\n")
  print(classification_report(y_test, y_pred))

for model_name, model_results in results.items():
    print(f"Results for {model_name}:\n")
    print("Confusion Matrix:\n", model_results['confusion_matrix'])
    print("Classification Report:\n", model_results['classification_report'])
    print("\n" + "-"*50 + "\n")